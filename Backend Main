import os
from fastapi import FastAPI, Depends, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from contextlib import asynccontextmanager
import logging

# Import local modules
from app.core.config import settings
from app.db.session import engine, SessionLocal
from app.db.base_class import Base
from app.api.api_v1.api import api_router
from app.core.scheduler import scheduler
from app.core.logger import setup_logging

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

# Create database tables
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Create tables on startup if they don't exist
    Base.metadata.create_all(bind=engine)
    logger.info("Database tables created or verified")
    
    # Start the background scheduler
    if settings.ENABLE_SCHEDULER:
        scheduler.start()
        logger.info("Background scheduler started")
    
    yield
    
    # Shutdown tasks
    if settings.ENABLE_SCHEDULER:
        scheduler.shutdown()
        logger.info("Background scheduler shutdown")


app = FastAPI(
    title=settings.PROJECT_NAME,
    description="AI-Powered Business Data Scraping API",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Dependency to get DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Include API router
app.include_router(api_router, prefix=settings.API_V1_STR)

# Health check endpoint
@app.get("/health")
def health_check():
    return {"status": "healthy", "version": "1.0.0"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
